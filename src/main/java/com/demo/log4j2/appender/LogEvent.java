/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.log4j2.appender;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9008978335210837264L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogEvent\",\"namespace\":\"com.demo.log4j2.appender\",\"fields\":[{\"name\":\"logger\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"level\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogEvent> ENCODER =
      new BinaryMessageEncoder<LogEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogEvent> DECODER =
      new BinaryMessageDecoder<LogEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogEvent from a ByteBuffer. */
  public static LogEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String logger;
   private java.lang.String level;
   private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogEvent() {}

  /**
   * All-args constructor.
   * @param logger The new value for logger
   * @param level The new value for level
   * @param message The new value for message
   */
  public LogEvent(java.lang.String logger, java.lang.String level, java.lang.String message) {
    this.logger = logger;
    this.level = level;
    this.message = message;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return logger;
    case 1: return level;
    case 2: return message;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: logger = (java.lang.String)value$; break;
    case 1: level = (java.lang.String)value$; break;
    case 2: message = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'logger' field.
   * @return The value of the 'logger' field.
   */
  public java.lang.String getLogger() {
    return logger;
  }


  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public java.lang.String getLevel() {
    return level;
  }


  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Creates a new LogEvent RecordBuilder.
   * @return A new LogEvent RecordBuilder
   */
  public static com.demo.log4j2.appender.LogEvent.Builder newBuilder() {
    return new com.demo.log4j2.appender.LogEvent.Builder();
  }

  /**
   * Creates a new LogEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogEvent RecordBuilder
   */
  public static com.demo.log4j2.appender.LogEvent.Builder newBuilder(com.demo.log4j2.appender.LogEvent.Builder other) {
    return new com.demo.log4j2.appender.LogEvent.Builder(other);
  }

  /**
   * Creates a new LogEvent RecordBuilder by copying an existing LogEvent instance.
   * @param other The existing instance to copy.
   * @return A new LogEvent RecordBuilder
   */
  public static com.demo.log4j2.appender.LogEvent.Builder newBuilder(com.demo.log4j2.appender.LogEvent other) {
    return new com.demo.log4j2.appender.LogEvent.Builder(other);
  }

  /**
   * RecordBuilder for LogEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogEvent>
    implements org.apache.avro.data.RecordBuilder<LogEvent> {

    private java.lang.String logger;
    private java.lang.String level;
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.demo.log4j2.appender.LogEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.logger)) {
        this.logger = data().deepCopy(fields()[0].schema(), other.logger);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.demo.log4j2.appender.LogEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.logger)) {
        this.logger = data().deepCopy(fields()[0].schema(), other.logger);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'logger' field.
      * @return The value.
      */
    public java.lang.String getLogger() {
      return logger;
    }

    /**
      * Sets the value of the 'logger' field.
      * @param value The value of 'logger'.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder setLogger(java.lang.String value) {
      validate(fields()[0], value);
      this.logger = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'logger' field has been set.
      * @return True if the 'logger' field has been set, false otherwise.
      */
    public boolean hasLogger() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'logger' field.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder clearLogger() {
      logger = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * @return The value.
      */
    public java.lang.String getLevel() {
      return level;
    }

    /**
      * Sets the value of the 'level' field.
      * @param value The value of 'level'.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder setLevel(java.lang.String value) {
      validate(fields()[1], value);
      this.level = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'level' field.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder clearLevel() {
      level = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder setMessage(java.lang.String value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.demo.log4j2.appender.LogEvent.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogEvent build() {
      try {
        LogEvent record = new LogEvent();
        record.logger = fieldSetFlags()[0] ? this.logger : (java.lang.String) defaultValue(fields()[0]);
        record.level = fieldSetFlags()[1] ? this.level : (java.lang.String) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogEvent>
    READER$ = (org.apache.avro.io.DatumReader<LogEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
